// Importing the necssary modules

const express = require("express");
const mysql = require("mysql");
const cors = require("cors");

// Created an Express application here
const app = express();
app.use(cors());

// for parsing the data with json format
app.use(express.json());

// setting up the MySQL database (yogaflex)
const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  database: "yogaflex",
});


// Handling user registration
app.post('/signup', async (req, res) => {
  try {
    // Check if the user is already registered or not
    const sqlAlreadyRegistered = "SELECT * FROM user WHERE email = ?";
    const existingUser = await queryAsync(sqlAlreadyRegistered, [req.body.email]);
    console.log(existingUser);
    if (existingUser.length > 0) {
      return res.json("This Email is already Registered");
    }

    // Insert user data into the 'user' table
    const sqlInsertUser = "INSERT INTO user (name, email, password, age, batchId) VALUES (?)";
    const userValues = [
      req.body.name,
      req.body.email,
      req.body.password,
      req.body.age,
      req.body.selectedBatch
    ];
    const insertedUser = await queryAsync(sqlInsertUser, [userValues]);

    // Insert corresponding entry into the 'payments' table with userId and initial paymentStatus as NULL
    const sqlInsertPayment = "INSERT INTO payments (userId, paymentStatus) VALUES (?, NULL)";
    await queryAsync(sqlInsertPayment, [insertedUser.insertId]);

    const user = {
      id: insertedUser.insertId,
      name: req.body.name,
      email: req.body.email,
      age: req.body.age,
      batchId: req.body.selectedBatch
    };

    return res.json({ status: "Registration Successful", user });
  } catch (error) {
    console.error(error);
    return res.status(500).json("Error");
  }
});

// Handling user login 
app.post('/login', async (req, res) => {
  try {
    const sql = "SELECT * FROM user WHERE email = ? AND password = ?";
    const userData = await queryAsync(sql, [req.body.email, req.body.password])
    if (userData.length > 0) {
      const user = {
        id: userData[0].userId,
        name: userData[0].name,
        email: userData[0].email,
        age: userData[0].age,
        batchId: userData[0].batchId,
        // Add other fields as needed
      };

      return res.json({ status: "Success", user });
    } else {
      return res.json("Fail");
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json("Error");
  }
});

// Retrieving userId for a particular user which is auto generated by MySQL (auto incremented)
app.get('/paymentStatus/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    const sql = 'SELECT paymentStatus FROM payments WHERE userId = ?';
    const paymentData = await queryAsync(sql, [userId]);

    if (paymentData.length > 0) {
      res.json({ paymentStatus: paymentData[0].paymentStatus });
    } else {
      res.json({ paymentStatus: false });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json('Error');
  }
});

app.get("/ping", async(req,res)=>{
  return res.json({"msg":"Message found"});
})

// Handling payment for a particular user
app.post('/makePayment/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    console.log('Making payment for user with ID:', userId);

    // Update the payment status to 1 (or true) for the specified user ID
    const sql = 'UPDATE payments SET paymentStatus = 1 WHERE userId = ?';
    console.log('SQL Query:', sql);

    await queryAsync(sql, [userId]);

    console.log('Payment successful!');
    res.json('Payment successful!');
  } catch (error) {
    console.error('Error making payment:', error);
    res.status(500).json('Error');
  }
});

// Handling batch changing requests
app.post('/batchChangeRequest', async (req, res) => {
  try {
    const { userId, batchChangeRequest } = req.body;

    // Check if the userId already exists in the batchChange table
    const sqlCheckExisting = "SELECT * FROM batchChange WHERE userId = ?";
    const existingBatchChange = await queryAsync(sqlCheckExisting, [userId]);

    if (existingBatchChange.length > 0) {
      // If the userId exists, update the batchChangeRequestTo value
      const sqlUpdateBatchChange = "UPDATE batchChange SET batchChangeRequestTo = ? WHERE userId = ?";
      await queryAsync(sqlUpdateBatchChange, [batchChangeRequest, userId]);
    } else {
      // If the userId doesn't exist, insert a new record
      const sqlInsertBatchChange = "INSERT INTO batchChange (userId, batchChangeRequestTo) VALUES (?, ?)";
      await queryAsync(sqlInsertBatchChange, [userId, batchChangeRequest]);
    }

    return res.json('Batch change request submitted successfully');
  } catch (error) {
    console.error('Error submitting batch change request:', error);
    return res.status(500).json('Error');
  }
});



const cron = require('node-cron');

// Schedule a task to run at the start of every month (1st day)
cron.schedule('0 0 1 * *', async () => {
  try {
    // Update paymentStatus for all users to 0
    const sqlUpdatePaymentStatus = "UPDATE payments SET paymentStatus = 0";
    await queryAsync(sqlUpdatePaymentStatus);

    console.log('PaymentStatus reset for all users at the start of the month.');

    // Fetch all batch change requests
    const sqlFetchBatchChangeRequests = "SELECT * FROM batchChange";
    const batchChangeRequests = await queryAsync(sqlFetchBatchChangeRequests);

    // Update user batches based on batchChange requests
    for (const batchChangeRequest of batchChangeRequests) {
      const { userId, batchChangeRequestTo } = batchChangeRequest;

      // Update the user's batch based on the batchChange request
      const sqlUpdateUserBatch = "UPDATE user SET batchId = ? WHERE id = ?";
      await queryAsync(sqlUpdateUserBatch, [batchChangeRequestTo, userId]);

      // Delete the processed batch change request
      const sqlRemoveBatchChangeRequest = "DELETE FROM batchChange WHERE userId = ?";
      await queryAsync(sqlRemoveBatchChangeRequest, [userId]);

      console.log(`Batch changed for user ${userId}. New batchId: ${batchChangeRequestTo}`);
    }

    console.log('Batch change requests processed successfully.');
  } catch (error) {
    console.error('Error resetting paymentStatus and processing batch change requests:', error);
  }
});



// Schedule a task to run on the last day of every month
cron.schedule('0 0 28-31 * *', async () => {
  try {
    // Find users with paymentStatus = 0
    const sqlFindUsers = "SELECT * FROM user INNER JOIN payments ON user.id = payments.userId WHERE payments.paymentStatus = 0";
    const usersToDrop = await queryAsync(sqlFindUsers);

    // Remove such user's accounts from the user table
    for (const user of usersToDrop) {
      const sqlDropUser = "DELETE FROM user WHERE id = ?";
      await queryAsync(sqlDropUser, [user.userId]);
    }

    console.log('Accounts dropped for users with paymentStatus = 0 on the last day of the month.');
  } catch (error) {
    console.error('Error dropping accounts:', error);
  }
});


// Helper function for MySQL queries
function queryAsync(sql, values) {
  return new Promise((resolve, reject) => {
    db.query(sql, values, (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}



app.listen(8081, () => {
  console.log("listening");
});
